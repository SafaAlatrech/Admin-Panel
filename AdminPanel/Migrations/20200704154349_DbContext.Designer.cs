// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RoleBasedAuthorization.Models;

namespace AdminPanel.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20200704154349_DbContext")]
    partial class DbContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RoleBasedAuthorization.Models.Admins", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("Password");

                    b.Property<int?>("RolesId");

                    b.HasKey("Id");

                    b.HasIndex("RolesId");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("RoleBasedAuthorization.Models.Doctors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Phone");

                    b.Property<string>("Specialist");

                    b.HasKey("Id");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("RoleBasedAuthorization.Models.LinkRolesMenus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MenusId");

                    b.Property<int>("RolesId");

                    b.HasKey("Id");

                    b.HasIndex("MenusId");

                    b.HasIndex("RolesId");

                    b.ToTable("LinkRolesMenus");
                });

            modelBuilder.Entity("RoleBasedAuthorization.Models.Menus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Icon");

                    b.Property<string>("Name");

                    b.Property<int>("ParentId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("RoleBasedAuthorization.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("RoleBasedAuthorization.Models.Admins", b =>
                {
                    b.HasOne("RoleBasedAuthorization.Models.Roles", "Roles")
                        .WithMany("Admins")
                        .HasForeignKey("RolesId");
                });

            modelBuilder.Entity("RoleBasedAuthorization.Models.LinkRolesMenus", b =>
                {
                    b.HasOne("RoleBasedAuthorization.Models.Menus", "Menus")
                        .WithMany("LinkRolesMenus")
                        .HasForeignKey("MenusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RoleBasedAuthorization.Models.Roles", "Roles")
                        .WithMany("LinkRolesMenus")
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
